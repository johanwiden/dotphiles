# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
export HISTCONTROL=ignoreboth

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
export HISTSIZE=5000
export HISTFILESIZE=50000

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# According to man gpg-agent
GPG_TTY=$(tty)
export GPG_TTY

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	    # We have color support; assume it's compliant with Ecma-48
	    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	    # a case would tend to support setf rather than setaf.)
	    color_prompt=yes
    else
	    color_prompt=
    fi
fi

if [[ "$TERM" != "dumb" ]]; then
    if [ "$color_prompt" = yes ]; then
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    fi
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    if [ -r ~/.dircolors ]; then
       eval "$(/usr/bin/dircolors -b ~/.dircolors)"
    else
       eval "$(/usr/bin/dircolors -b)"
    fi
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

export ALTERNATE_EDITOR=""
#export EDITOR="emacsclient -t"        # $EDITOR opens in terminal
export EDITOR="emacsclient -c"         # $EDITOR opens in GUI
export VISUAL="emacsclient -c"         # $VISUAL opens in GUI mode

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
[ -r /home/jw/.byobu/prompt ] && . /home/jw/.byobu/prompt   #byobu-prompt#

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/jw/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/jw/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/jw/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/jw/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# >>> juliaup initialize >>>

# !! Contents within this block are managed by juliaup !!

case ":$PATH:" in
    *:/home/jw/.juliaup/bin:*)
        ;;

    *)
        export PATH=/home/jw/.juliaup/bin${PATH:+:${PATH}}
        ;;
esac

# <<< juliaup initialize <<<

# Activate python venv, but only if not already activated.
command -v deactivate >/dev/null 2>&1 || source .venv/bin/activate

# pyenv
# export PATH="/home/jw/.pyenv/bin:$PATH"
# eval "$(pyenv init -)"
# eval "$(pyenv virtualenv-init -)"

# python pdm: Enable python support for PEP582 (packages the project depends on are stored in a project subdirectory)
# if command -v pdm &> /dev/null ; then
#     if [ -n "$PYTHONPATH" ]; then
#         export PYTHONPATH='/usr/lib/python3/dist-packages/pdm/pep582':$PYTHONPATH
#     else
#         export PYTHONPATH='/usr/lib/python3/dist-packages/pdm/pep582'
#     fi
# fi

# Fasd offers quick access to files and directories for POSIX shells.
# This will setup a command hook that executes on every command and advanced tab completion for zsh and bash.
eval "$(fasd --init auto)"

# rbenv
# eval "$(~/.rbenv/bin/rbenv init - bash)"

# if [[ -x /usr/local/bin/mcfly ]]; then
#    export MCFLY_LIGHT=TRUE
#    export MCFLY_FUZZY=2
#    eval "$(mcfly init bash)"
# fi

if [[ "$TERM" != "dumb" ]]; then
    if [[ -r /usr/share/doc/fzf/examples/key-bindings.bash ]]; then
        export FZF_DEFAULT_COMMAND='rg --files --hidden'
        export FZF_DEFAULT_OPTS="-m --height 50% --layout=reverse --border --inline-info --preview-window=:hidden --preview '([[ -f {} ]] && (bat --style=numbers --color=always {} || cat {})) || ([[ -d {} ]] && (tree -C {} | less)) || echo {} 2> /dev/null | head -200' --bind '?:toggle-preview'"
        source /usr/share/doc/fzf/examples/key-bindings.bash

        # search all files including hidden and ignore files
        # rg . --files --hidden --unrestricted | fzf --print0

        # grep --line-buffered --color=never -r "" * | fzf
        # rg . | fzf --print0 -e # remove -e for fuzzy match

        # using ripgrep combined with preview
        # find-in-file - usage: fif <searchTerm>
        fif() {
         if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
          rg --files-with-matches --no-messages "$1" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
        }

        zfzf() {
          local dir
          dir="$(fasd -Rdl "$1" | fzf -1 -0 --no-sort +m)" && cd "${dir}" || return 1
        }
    fi

    vterm_printf(){
        if [ -n "$TMUX" ]; then
            # Tell tmux to pass the escape sequences through
            # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
            printf "\ePtmux;\e\e]%s\007\e\\" "$1"
        else
            printf "\e]%s\e\\" "$1"
        fi
    }

    vterm_prompt_end(){
        vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
    }
    PS1=$PS1'\[$(vterm_prompt_end)\]'

    rga-fzf() {
    	RG_PREFIX="rga --files-with-matches"
    	local file
    	file="$(
    		FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
    			fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 5 {q} {}" \
    				--phony -q "$1" \
    				--bind "change:reload:$RG_PREFIX {q}" \
    				--preview-window="70%:wrap"
    	)" &&
    	echo "opening $file" &&
    	xdg-open "$file"
    }
fi

[ -n "$EAT_SHELL_INTEGRATION_DIR" ] && \
  source "$EAT_SHELL_INTEGRATION_DIR/bash"

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
. "$HOME/.cargo/env"
